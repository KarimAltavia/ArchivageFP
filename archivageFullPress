import os
import shutil
import logging
import datetime

def get_client_name():
    return input("Quel client voulez-vous sauvegarder ? ")

def verify_and_copy_folders(path, save_path, folder_to_save):
    for folder in folder_to_save:
        src = os.path.join(save_path, folder)
        dst = os.path.join(path, folder, "PDFs")
        if os.path.exists(src):
            if not os.path.exists(dst):
                shutil.copytree(src, dst)
                print(f"Le dossier {folder} a été copié de {save_path} à {path}.")
            else:
                print(f"Le dossier {folder} existe déjà dans {path}.")
        else:
            print(f"Le dossier {folder} n'existe pas dans {save_path}.")

def create_logs_directory(logs_dir):
    os.makedirs(logs_dir, exist_ok=True)

def setup_logger(logs_dir):
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    log_file_path = os.path.join(logs_dir, f"journal_événement{now}.log")

    handler = logging.FileHandler(log_file_path)
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    return logger

def copy_folders_and_log(source_dir, dest_dir, logger):
    copied_folders = []

    for folder_name in os.listdir(source_dir):
        source_folder = os.path.join(source_dir, folder_name)
        dest_folder = os.path.join(dest_dir, folder_name)

        if not os.path.isdir(source_folder):
            continue

        if os.path.exists(dest_folder):
            logger.info(f"Le dossier '{folder_name}' existe déjà dans le dossier d'archivage - de 2 ans.")
        else:
            try:
                shutil.copytree(source_folder, dest_folder)
                logger.info(f"Le dossier '{folder_name}' a été copié avec succès dans le dossier d'archivage - de 2 ans.")
                copied_folders.append(folder_name)
            except Exception as e:
                logger.error(f"La copie du dossier '{folder_name}' a échoué : {str(e)}")
    return copied_folders

def write_copied_folders_to_file(copied_folders, logs_dir):
    now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    with open(os.path.join(logs_dir, f"liste_des_dossiers_copiés_{now}.txt"), 'w') as f:
        for folder_name in copied_folders:
            f.write(f"{folder_name}\n")

def remove_source_folders(copied_folders, source_dir, logger):
    for folder_name in copied_folders:
        source_folder = os.path.join(source_dir, folder_name)
        if os.path.isdir(source_folder):
            try:
                shutil.rmtree(source_folder)
                logger.info(f"Le dossier source '{folder_name}' a été supprimé avec succès.")
            except Exception as e:
                logger.error(f"La suppression du dossier source '{folder_name}' a échoué : {str(e)}")
        else:
            logger.warning(f"Le dossier source '{folder_name}' n'existe plus.")

def main():
    client = get_client_name()

    path_base = "/Users/k.bachekour/Documents/FP/mnt/prod/shares/"

    path = os.path.join(path_base, client, "FRANCE/00_A_ARCHIVER_ONLINE/")
    if client == "AUCHAN":
        save_path = os.path.join(path_base, "ALTFRSE/ALTFRSE_SORTIE_FLUX", client, "PUBLISH")
    else:
        save_path = os.path.join(path_base, "ALTFRSE/ALTFRSE_SORTIE_FLUX", client)
    source_dir = os.path.join(path_base, client, "FRANCE/00_A_ARCHIVER_ONLINE")
    dest_dir = os.path.join(path_base, "ARCHIVES-2ANS", client)
    logs_dir = os.path.join(dest_dir, "logs")

    if os.path.exists(path):
        folder_to_save = [f for f in os.listdir(path) if os.path.isdir(os.path.join(path, f))]
        verify_and_copy_folders(path, save_path, folder_to_save)
    else:
        print(f"Le chemin {path} n'existe pas.")

    create_logs_directory(logs_dir)
    logger = setup_logger(logs_dir)

    copied_folders = copy_folders_and_log(source_dir, dest_dir, logger)
    write_copied_folders_to_file(copied_folders, logs_dir)
    remove_source_folders(copied_folders, source_dir, logger)

    num_copied_folders = len(copied_folders)
    print(f"Tu as copié avec succès {num_copied_folders} dossiers dans {os.path.join(path_base, 'ARCHIVES-2ANS', client)}!")

if __name__ == "__main__":
    main()